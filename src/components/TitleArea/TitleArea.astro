---
import Shortinfo from "./Shortinfo.astro";
import Links from "./Links.astro";
import NameLeft from "../InlineSVGs/NameLeft.astro";
import NameRight from "../InlineSVGs/NameRight.astro";
import TaglineLeft from "../InlineSVGs/TaglineLeft.astro";
import TaglineRight from "../InlineSVGs/TaglineRight.astro";
import { Image } from "astro:assets";

import titleImage from "../../../public/images/title.jpg";
---

<div class="maingrid">
	<Shortinfo />
	<Links />

	<div id="tagline" class="mx-4 md:mx-8 max-md:my-4 relative">
		<Image
			id="titleimage"
			src={titleImage}
			alt="Blurry photo of subway station"
			widths={[300, 600, 1000, 2000]}
			sizes={`(max-width: 600px) 300px, (max-width: 1000px) 600px, (max-width: 2000px) 1000px, 2000px`}
			quality={80}
			loading="eager"
			class="w-full max-md:-mt-16 max-md:translate-y-6 md:w-[60%] h-48 md:h-full xl:h-[80%] object-cover md:absolute left-[12vw] top-[50%] md:max-xl:top-[25%] select-none"
		/>

		<div class="md:hidden flex justify-end h-[20vw]">
			<TaglineRight />
		</div>
		<div class="max-md:hidden flex justify-start pt-4 max-w-[100vw] h-48 lg:h-64 xl:h-[28vh]">
			<TaglineLeft />
		</div>
	</div>

	<div
		id="name"
		class="mx-4 max-w-[100vw] md:h-full flex justify-start md:justify-end md:items-end">
		<div class="md:hidden h-[24vw]">
			<NameLeft />
		</div>
		<div class="max-md:hidden h-48 lg:h-64 xl:h-[28vh]">
			<NameRight />
		</div>
	</div>
</div>


<script lang="js">
	const mouseContainer = document.body;
	const movingImage = document.querySelector("#titleimage");
	const constrain = mouseContainer.clientWidth / 20;
	const maxChange = 200,
		changeRate = 100;

	let currentX = 0,
		currentY = 0;

	const imageCenter = [
		movingImage.x + movingImage.clientWidth / 2,
		movingImage.y + movingImage.clientHeight / 2
	];

	const mightBeMobile = [
		/Android/i,
		/webOS/i,
		/iPhone/i,
		/iPad/i,
		/iPod/i,
		/BlackBerry/i,
		/Windows Phone/i
	].some((toMatchItem) => {
		return navigator.userAgent.match(toMatchItem);
	});

	function transforms(x, y, el) {
		x = x - imageCenter[0];
		y = y - imageCenter[1];

		if (Math.abs(currentX - x) > maxChange) {
			x = x > currentX ? currentX + changeRate : currentX - changeRate;
		}
		if (Math.abs(currentY - y) > maxChange) {
			y = y > currentY ? currentY + changeRate : currentY - changeRate;
		}

		currentX = x;
		currentY = y;

		return `perspective(${mouseContainer.clientWidth}px) rotateX(${y / constrain}deg) rotateY(${
			x / constrain
		}deg)`;
	}

	function transformElement(el, xyEl) {
		el.style.transform = transforms(xyEl[0], xyEl[1], el);
	}

	mouseContainer.onmousemove = function (e) {
		if (mightBeMobile) {
			return;
		}

		let xy = [e.clientX, e.clientY];
		let position = xy.concat([movingImage]);

		window.requestAnimationFrame(function () {
			transformElement(movingImage, position);
		});
	};
</script>
