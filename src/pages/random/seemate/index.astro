---
import Layout from "../../../layouts/Layout.astro";
import "../../../styles/main.scss";
import "./styles.scss";
---

<Layout title="SeeingMate" description="SeeingMate - A tool to view and manage user photos.">
	<div class="seemate-wrapper">
		<h1 class="seemate-title">SeeingMate</h1>
		
		<div class="seemate-panes">
			<div class="seemate-pane seemate-user-pane">
				<div class="seemate-controls">
					<div class="seemate-photo-controls">
						<input type="text" id="useridInput" class="seemate-input" placeholder="Enter User ID" tabindex="1" />
						<button class="seemate-btn" onclick="showPhotos()" tabindex="2">Show Photos</button>
					</div>
					<div id="photoContainer" class="photo-row"></div>
				</div>
			</div>

			<div class="seemate-pane seemate-list-pane">
				<div class="seemate-user-controls">
					<input type="text" id="nameInput" class="seemate-input" placeholder="Enter Name" tabindex="3" />
					<div class="seemate-photo-controls">
						<button class="seemate-btn" onclick="saveUserId()" tabindex="4">Save User</button>
						<button class="seemate-btn" onclick="exportUsers()">Export</button>
						<button class="seemate-btn" onclick="openImportDialog()">Import</button>
					</div>
				</div>
				<div id="savedUserIds" class="seemate-saved-users"></div>
			</div>
		</div>

		<div class="fullscreen" id="fullscreen">
			<div class="navigation">
				<button class="seemate-btn" onclick="prevPhoto()">&#9664; Prev</button>
				<button class="seemate-btn" onclick="nextPhoto()">Next &#9654;</button>
			</div>
			<img id="fullscreenImg" src="" alt="Full Screen" />
		</div>

		<div class="import-dialog" id="importDialog">
			<div class="dialog">
				<textarea
					id="importData"
					class="seemate-input"
					placeholder="Import users (id name)"
					rows="5"></textarea>
				<div class="seemate-photo-controls">
					<button class="seemate-btn" onclick="importUsers()">Import</button>
					<button class="seemate-btn" onclick="closeImportDialog()">Cancel</button>
				</div>
			</div>
		</div>
	</div>
</Layout>

<script is:inline>
	// DOM Elements
	const photoContainer = document.getElementById("photoContainer");
	const fullscreen = document.getElementById("fullscreen");
	const fullscreenImg = document.getElementById("fullscreenImg");
	const savedUserIdsDiv = document.getElementById("savedUserIds");
	const importDialog = document.getElementById("importDialog");
	const useridInput = document.getElementById("useridInput");
	
	// State
	let currentPhotoIndex = 0;
	let currentPhotos = [];

	// Snackbar
	function showSnackbar(message) {
		const snackbar = document.createElement("div");
		snackbar.className = "seemate-snackbar";
		snackbar.textContent = message;
		document.body.appendChild(snackbar);
		
		// Trigger reflow
		snackbar.offsetHeight;
		
		snackbar.classList.add("show");
		
		setTimeout(() => {
			snackbar.classList.remove("show");
			setTimeout(() => snackbar.remove(), 300);
		}, 3000);
	}

	// Photo Display Functions
	function showPhotos() {
		const userid = useridInput.value.trim().replace(/[/\s.]/g, "");
		if (userid.length !== 10) return;
		
		photoContainer.innerHTML = "";
		currentPhotos = [];

		for (let i = -1; i < 6; i++) {
			const suffix = i === -1 ? "" : `-${i}`;
			const url = `https://static.blindmate.de/u/${userid.substring(0, 2)}/${userid.substring(2, 4)}/${userid.substring(4)}${suffix}.jpg`;
			currentPhotos.push(url);

			const img = document.createElement("img");
			img.src = url;
			img.className = "photo";
			img.onclick = () => openFullscreen(i + 1);
			photoContainer.appendChild(img);
		}
	}

	function openFullscreen(index) {
		currentPhotoIndex = index;
		fullscreenImg.src = currentPhotos[index];
		fullscreen.style.display = "flex";
	}

	function closeFullscreen() {
		fullscreen.style.display = "none";
	}

	function prevPhoto() {
		currentPhotoIndex = (currentPhotoIndex - 1 + currentPhotos.length) % currentPhotos.length;
		fullscreenImg.src = currentPhotos[currentPhotoIndex];
	}

	function nextPhoto() {
		currentPhotoIndex = (currentPhotoIndex + 1) % currentPhotos.length;
		fullscreenImg.src = currentPhotos[currentPhotoIndex];
	}

	fullscreen.onclick = (e) => {
		if (e.target === fullscreen) {
			closeFullscreen();
		}
	};

	// User Management Functions
	function saveUserId() {
		const userid = document.getElementById("useridInput").value.trim().replace(/\//g, "");
		const name = document.getElementById("nameInput").value;
		if (!userid || !name) return;

		const userIds = JSON.parse(localStorage.getItem("userIds")) || {};
		userIds[userid] = name;
		localStorage.setItem("userIds", JSON.stringify(userIds));
		displaySavedUserIds();
	}

	function displaySavedUserIds() {
		const userIds = JSON.parse(localStorage.getItem("userIds")) || {};
		savedUserIdsDiv.innerHTML = "";

		for (const [userid, name] of Object.entries(userIds)) {
			const container = document.createElement("div");
			container.style.display = "flex";
			container.style.alignItems = "center";

			const img = document.createElement("img");
			img.src = `https://static.blindmate.de/u/${userid.substring(0, 2)}/${userid.substring(2, 4)}/${userid.substring(4)}.jpg`;
			img.className = "user-preview";

			const info = document.createElement("div");
			info.className = "user-info";
			info.textContent = `${name} (${userid})`;

			const deleteBtn = document.createElement("button");
			deleteBtn.innerHTML = "🗑️";
			deleteBtn.className = "delete-btn";
			deleteBtn.onclick = (e) => {
				e.stopPropagation();
				deleteUser(userid);
			};

			container.appendChild(img);
			container.appendChild(info);
			container.appendChild(deleteBtn);
			
			// Make entire container clickable
			container.onclick = () => {
				useridInput.value = userid;
				showPhotos();
			};
			
			savedUserIdsDiv.appendChild(container);
		}
	}

	function deleteUser(userid) {
		const userIds = JSON.parse(localStorage.getItem("userIds")) || {};
		delete userIds[userid];
		localStorage.setItem("userIds", JSON.stringify(userIds));
		displaySavedUserIds();
	}

	function exportUsers() {
		const userIds = JSON.parse(localStorage.getItem("userIds")) || {};
		const exportData = Object.entries(userIds)
			.map(([id, name]) => `${id} ${name}`)
			.join("\n");
		navigator.clipboard.writeText(exportData).then(() => {
			showSnackbar("User data copied to clipboard");
		});
	}

	// Import Dialog Functions
	function openImportDialog() {
		importDialog.style.display = "flex";
	}

	function closeImportDialog() {
		importDialog.style.display = "none";
	}

	function importUsers() {
		const importText = document.getElementById("importData").value.trim();
		const lines = importText.split("\n");
		const userIds = JSON.parse(localStorage.getItem("userIds")) || {};

		lines.forEach((line) => {
			const [id, ...nameParts] = line.split(" ");
			const cleanId = id.replace(/\//g, "");
			const name = nameParts.join(" ");
			if (cleanId && name) {
				userIds[cleanId] = name;
			}
		});

		localStorage.setItem("userIds", JSON.stringify(userIds));
		displaySavedUserIds();
		closeImportDialog();
		showSnackbar("Users imported successfully");
	}

	// Keyboard Event Handlers
	document.addEventListener("keydown", (e) => {
		if (e.key === "Escape") {
			if (fullscreen.style.display === "flex") {
				closeFullscreen();
			}
			if (importDialog.style.display === "flex") {
				closeImportDialog();
			}
		}
		
		// Only handle navigation keys if fullscreen is open
		if (fullscreen.style.display !== "flex") return;
		
		switch (e.key) {
			case "ArrowLeft":
			case "k":
				e.preventDefault();
				prevPhoto();
				break;
			case "ArrowRight":
			case "j":
				e.preventDefault();
				nextPhoto();
				break;
		}
	});

	// Auto-update on valid user ID
	useridInput.addEventListener("input", () => {
		const cleanId = useridInput.value.trim().replace(/[/\s.]/g, "");
		if (cleanId.length === 10) {
			showPhotos();
		}
	});

	// Initialize
	displaySavedUserIds();
</script>
